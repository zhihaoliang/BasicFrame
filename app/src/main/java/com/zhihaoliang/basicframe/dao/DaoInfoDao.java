package com.zhihaoliang.basicframe.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhihaoliang.basicframe.mode.database.DaoInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAO_INFO".
*/
public class DaoInfoDao extends AbstractDao<DaoInfo, Long> {

    public static final String TABLENAME = "DAO_INFO";

    /**
     * Properties of entity DaoInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Phone = new Property(1, String.class, "phone", false, "PHONE");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property EmpCode = new Property(3, String.class, "empCode", false, "EMP_CODE");
        public final static Property OrgCode = new Property(4, String.class, "orgCode", false, "ORG_CODE");
        public final static Property OrgName = new Property(5, String.class, "orgName", false, "ORG_NAME");
        public final static Property EmpName = new Property(6, String.class, "empName", false, "EMP_NAME");
        public final static Property EncryptKey = new Property(7, String.class, "encryptKey", false, "ENCRYPT_KEY");
        public final static Property DeviceId = new Property(8, Integer.class, "deviceId", false, "DEVICE_ID");
        public final static Property IsSavePassword = new Property(9, Boolean.class, "isSavePassword", false, "IS_SAVE_PASSWORD");
    }


    public DaoInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DaoInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAO_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PHONE\" TEXT," + // 1: phone
                "\"PASSWORD\" TEXT," + // 2: password
                "\"EMP_CODE\" TEXT," + // 3: empCode
                "\"ORG_CODE\" TEXT," + // 4: orgCode
                "\"ORG_NAME\" TEXT," + // 5: orgName
                "\"EMP_NAME\" TEXT," + // 6: empName
                "\"ENCRYPT_KEY\" TEXT," + // 7: encryptKey
                "\"DEVICE_ID\" INTEGER," + // 8: deviceId
                "\"IS_SAVE_PASSWORD\" INTEGER);"); // 9: isSavePassword
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAO_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DaoInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String empCode = entity.getEmpCode();
        if (empCode != null) {
            stmt.bindString(4, empCode);
        }
 
        String orgCode = entity.getOrgCode();
        if (orgCode != null) {
            stmt.bindString(5, orgCode);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(6, orgName);
        }
 
        String empName = entity.getEmpName();
        if (empName != null) {
            stmt.bindString(7, empName);
        }
 
        String encryptKey = entity.getEncryptKey();
        if (encryptKey != null) {
            stmt.bindString(8, encryptKey);
        }
 
        Integer deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindLong(9, deviceId);
        }
 
        Boolean isSavePassword = entity.getIsSavePassword();
        if (isSavePassword != null) {
            stmt.bindLong(10, isSavePassword ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DaoInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String empCode = entity.getEmpCode();
        if (empCode != null) {
            stmt.bindString(4, empCode);
        }
 
        String orgCode = entity.getOrgCode();
        if (orgCode != null) {
            stmt.bindString(5, orgCode);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(6, orgName);
        }
 
        String empName = entity.getEmpName();
        if (empName != null) {
            stmt.bindString(7, empName);
        }
 
        String encryptKey = entity.getEncryptKey();
        if (encryptKey != null) {
            stmt.bindString(8, encryptKey);
        }
 
        Integer deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindLong(9, deviceId);
        }
 
        Boolean isSavePassword = entity.getIsSavePassword();
        if (isSavePassword != null) {
            stmt.bindLong(10, isSavePassword ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DaoInfo readEntity(Cursor cursor, int offset) {
        DaoInfo entity = new DaoInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phone
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // empCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // orgCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // orgName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // empName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // encryptKey
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // deviceId
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0 // isSavePassword
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DaoInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhone(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmpCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrgCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrgName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmpName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEncryptKey(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDeviceId(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIsSavePassword(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DaoInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DaoInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DaoInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
